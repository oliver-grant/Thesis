\frametitle {Algorithm ApproxMWPaging}\label{Algorithm ApproxMWPaging}

In this section We provide an algorithm for creating a BST and subsequently packing it into memory. The algorithm first uses the multiway search tree construction algorithm of Bose and Dou\"{i}eb as a subroutine to be a mutliway search tree. This multiway search tree is converted into a BST, then packed into the memory hierarchy. \\

First, we describe how we convert a multiway search tree to a binary search tree. For the sake of clarity, we will call what are typically known as \textit{nodes} of the multiway tree \textit{pages}. This represents how various items of our search tree will fit onto pages of our memory hierarchy. We maintain the notion of calling individual items \textit{keys}.

\begin{lem}\label{MWTBSTLem}
Given a multiway tree $T'$ with page size $k$ (a k$+1$-ary tree) and $n$ keys, where keys are associated with a probability distribution of successful and unsuccessful searches as in Knuth's original optimum binary search tree problem, we can create a BST $T$ where each key in a given page $g \in T'$ forms a connected component in $T$ in $O(n\lg(k))$ time.
\end{lem}

\begin{proof}
For each page $g$, we sort its keys by lexicographic order and create a complete BST $B$ over the keys. We create an ordering over all potential locations where \textit{additional} keys could be added to the tree from left to right. All keys in all descendant pages of a page $g$ in a specific subtree rooted at a child of $g$ will lie in a specific range. There are at most $k+1$ of these ranges (since our page has at most $k$ keys). These ranges precisely correspond to the at most $k+1$ locations where a new child key could be added. We order these locations from left to right and attach root keys from the newly created BST's of each of the ordered (left to right) child of $g$. Leaf pages with a single gap are attached in a similar fashion. These are all valid connections since each child of $g$ has keys in these correct ranges, and combining BST's in this fashion produces a valid BST. We perform a sort of $O(k)$ items (in time $O(k\lg(k))$) $O(\frac{n}{k})$ times, and make $O(n)$ new parent child connections, giving us total time $O(n \lg(k))$.
\end{proof}

In order to obtain a gooe approximate solution to the optimum BST problem under the HMM model, we do the following:

\begin{enumerate}
\item First, we create a multiway tree $T'$ using the algorithm of Bose and Dou\"{i}eb. This takes $O(n)$ time with our page size equal to $m_1$ (the smallest level of our memory hierarchy) \cite{bose2009efficient}.

\item Inside each page (node of the multiway tree $T'$), we create a balanced binary search tree (ignoring weights). We use a simple greedy approach where we sort the keys, then recursively select the middle key as the root.  We call each of these $T'_k$ for $k \in {1,...,\lceil n/m_1 \rceil}$. This takes $O(n\cdot\lg(m_1))$ by Lemma~\ref{MWTBSTLem}.

\item In order to make this into a proper binary search tree, we must connect the $O(n/m_1)$ BST's we have made as described in Lemma~\ref{MWTBSTLem}. From $T'$, we create a BST $T$. This takes $O(n\cdot\lg(m_1))$ time.

\item We pack keys into memory in a breadth first search order of $T$ starting from the root. This takes $O(n)$ time.

\end{enumerate}

\noindent We are left with a binary search tree which has been properly packed into our memory in total time $O(n\cdot\lg(m_1))$.

\pagebreak
\begin{figure}[H]

% Set the overall layout of the tree
\tikzstyle{level 1}=[level distance=3cm, sibling distance=3cm]
\tikzstyle{level 2}=[level distance=3cm, sibling distance=3cm]

\begin{center}
\begin{subfigure}[b]{0.36\textwidth}

\scriptsize


\begin{tikzpicture}[scale=0.5]

\node [circle,draw] (z){4\: 8 14}
  child {node [circle,draw] (a) {1\: \:2\: \:3}
  }
  child {node [circle,draw] (b) {5\: \:6\: \:7}
  }
  child {node [circle,draw] (c) {9\: 10 11}
    child {node [circle,draw] (e) {12 \:\:\: 13}}
  }
  child {node [circle,draw] (d) {15 16 17}
  };

\end{tikzpicture}
\caption{Part 1. of ApproxMWPaging}
\end{subfigure}
\end{center}

\vspace{3em}

% Set the overall layout of the tree
\tikzstyle{level 1}=[level distance=3cm, sibling distance=3.5cm]
\tikzstyle{level 2}=[level distance=3cm, sibling distance=3.5cm]

\tikzset{smnode/.style={level 1/.style={level distance=1cm, sibling distance=1cm}, circle, draw}}
\tikzstyle{level 1}=[level distance=3cm, sibling distance=3.5cm]
\tikzstyle{level 2}=[level distance=3cm, sibling distance=3.5cm]
\tikzstyle{level 3}=[level distance=1cm, sibling distance=1cm]
\begin{center}
\begin{subfigure}[b]{0.82\textwidth}
\begin{tikzpicture}
\scriptsize
\node[circle,draw] (z){
\tikzstyle{level 1}=[level distance=1cm, sibling distance=1cm]
\begin{tikzpicture}
\node [draw,circle] (zZ){8}
   child {node [draw,circle] (Za) {4}
   }
   child {node [draw,circle] (Zb) {14}
   };
\end{tikzpicture}
}

  child {node [circle,draw] (a) {
\tikzstyle{level 2}=[level distance=1cm, sibling distance=1cm]
\begin{tikzpicture}
\node [circle,draw] (z){2}
   child {node [circle,draw] (a) {1}
   }
   child {node [circle,draw] (b) {3}
   };
\end{tikzpicture}
  }edge from parent[shorten <=1.02cm]
  }
  child {node [circle,draw] (b) {
\tikzstyle{level 2}=[level distance=1cm, sibling distance=1cm]
\begin{tikzpicture}
\node [circle,draw] (z){6}
   child {node [circle,draw] (a) {5}
   }
   child {node [circle,draw] (b) {7}
   };
\end{tikzpicture}
  }edge from parent[shorten <=1.02cm]
  }
  child {node [circle,draw] (c) {
\tikzstyle{level 2}=[level distance=1cm, sibling distance=1cm]
\begin{tikzpicture}
\node [circle,draw] (z){10}
   child {node [circle,draw] (a) {9}
   }
   child {node [circle,draw] (b) {11}
   };
\end{tikzpicture}
   }
   child {node [circle,draw] (asdf) {
   \tikzstyle{level 2}=[level distance=1cm, sibling distance=1cm]
\begin{tikzpicture}
   \node [smnode] (zz){12}
   child {node [circle,draw=none] {}edge from parent[draw=none]}
   child {node [smnode] (asaa) {13}
   };
\end{tikzpicture}
   }
   }
  edge from parent[shorten <=0.97cm]
  }
  child {node [circle,draw] (d) {
\tikzstyle{level 2}=[level distance=1cm, sibling distance=1cm]
\begin{tikzpicture}
\node [circle,draw] (z){16}
   child {node [circle,draw] (a) {15}
   }
   child {node [circle,draw] (b) {17}
   };
\end{tikzpicture}
  }edge from parent[shorten <=0.97cm]
  };
\end{tikzpicture}
\caption{Part 2. of ApproxMWPaging}
\end{subfigure}
\end{center}

\end{figure}

\clearpage

\begin{figure}[H]
\begin{center}
\scriptsize

\tikzstyle{level 1}=[level distance=1cm]
\tikzstyle{level 2}=[level distance=1cm]
\tikzstyle{level 3}=[level distance=1cm]
\begin{subfigure}[b]{0.72\textwidth}

\caption{Part 3. of ApproxMWPaging}



\end{subfigure}
\end{center}


\begin{center}
\scriptsize

\begin{subfigure}[b]{0.72\textwidth}


\begin{center}
    \begin{tabular}{ | l | l | l | p{5cm} |}
    \hline
    Memory Location & Node & Left Child Location & Right Child Location \\ \hline
    1  & 8  & 2    & 3    \\ \hline
    2  & 4  & 4    & 5    \\ \hline
    3  & 14 & 6    & 7    \\ \hline
    4  & 2  & 8    & 9    \\ \hline
    5  & 6  & 10   & 11   \\ \hline
    6  & 10 & 12   & 13   \\ \hline
    7  & 16 & 14   & 15   \\ \hline
    8  & 1  & --- & --- \\ \hline
    9  & 3  & --- & --- \\ \hline
    10 & 5  & --- & --- \\ \hline
    11 & 7  & --- & --- \\ \hline
    12 & 9  & --- & --- \\ \hline
    13 & 11 & --- & 16   \\ \hline
    14 & 15 & --- & --- \\ \hline
    15 & 17 & --- & --- \\ \hline
    16 & 12 & --- & 17   \\ \hline
    17 & 13 & --- & --- \\ \hline
    \end{tabular}
\end{center}

\caption{Part 4. of ApproxMWPaging}
\end{subfigure}
\end{center}


\caption{An example of the ApproxMWPaging algorithm.}
\end{figure}
